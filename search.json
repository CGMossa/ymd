[{"path":"https://shrektan.github.io/ymd/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 ymd authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://shrektan.github.io/ymd/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Xianying Tan. Author, maintainer.","code":""},{"path":"https://shrektan.github.io/ymd/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Tan X (2022). ymd: Parse 'YMD' Format Number String Date. https://shrektan.github.io/ymd/, https://github.com/shrektan/ymd.","code":"@Manual{,   title = {ymd: Parse 'YMD' Format Number or String to Date},   author = {Xianying Tan},   year = {2022},   note = {https://shrektan.github.io/ymd/, https://github.com/shrektan/ymd}, }"},{"path":"https://shrektan.github.io/ymd/index.html","id":"ymd","dir":"","previous_headings":"","what":"Parse YMD Format Number or String to Date","title":"Parse YMD Format Number or String to Date","text":"Convert ‘YMD’ format number string Date efficiently, e.g., 211225 .Date(\"2021-12-25\"), using Rust’s standard library. also provides helper functions handle Date, e.g., quick finding beginning ending given period, adding months Date, etc. ’s similar lubridate package much lighter focuses Date objects.","code":""},{"path":"https://shrektan.github.io/ymd/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Parse YMD Format Number or String to Date","text":"Note, order compile package source need Rust toolchain, can found Rust’s official website.","code":""},{"path":"https://shrektan.github.io/ymd/index.html","id":"some-use-case-and-benchmarks","dir":"","previous_headings":"","what":"Some use case and benchmarks","title":"Parse YMD Format Number or String to Date","text":"","code":"x <- c(\"210101\", \"21/02/03\", \"89-1-03\", \"1989.03.05\") x <- rep(x, 100) bench::mark(   ymd::ymd(x),   lubridate::ymd(x), time_unit = \"us\" ) #> # A tibble: 2 × 6 #>   expression           min median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>         <dbl>  <dbl>     <dbl> <bch:byt>    <dbl> #> 1 ymd::ymd(x)         33.5   34.7    28502.  213.88KB      0   #> 2 lubridate::ymd(x) 1887.  1935.       513.    8.22MB     19.9  x <- c(210101, 210224, 211231, 19890103) x <- rep(x, 100) bench::mark(   ymd::ymd(x),   lubridate::ymd(x), time_unit = \"us\" ) #> # A tibble: 2 × 6 #>   expression           min median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>         <dbl>  <dbl>     <dbl> <bch:byt>    <dbl> #> 1 ymd::ymd(x)         12.2   12.7    77720.    3.17KB      0   #> 2 lubridate::ymd(x) 1728.  1766.       561.  373.41KB     19.7  x <- c(\"2021-01-01\", \"2022-12-31\", \"1995-03-22\") x <- rep(x, 100) bench::mark(   ymd::ymd(x),   lubridate::ymd(x), time_unit = \"us\",   as.Date(x) ) #> # A tibble: 3 × 6 #>   expression          min median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>        <dbl>  <dbl>     <dbl> <bch:byt>    <dbl> #> 1 ymd::ymd(x)        32.9   33.5    29587.    2.39KB      0   #> 2 lubridate::ymd(x) 801.   824.      1203.   201.1KB     22.0 #> 3 as.Date(x)        664.   693.      1438.   87.54KB      0  x <- ymd::ymd(210515) + 1:100 bench::mark(   ymd::eop$tm(x),   lubridate::ceiling_date(x, \"month\") - 1 ) #> # A tibble: 2 × 6 #>   expression                                   min   median `itr/sec` mem_alloc #>   <bch:expr>                              <bch:tm> <bch:tm>     <dbl> <bch:byt> #> 1 ymd::eop$tm(x)                             5.7µs   6.15µs   158650.    19.3KB #> 2 lubridate::ceiling_date(x, \"month\") - 1   96.5µs 103.53µs     9506.   255.1KB #> # … with 1 more variable: gc/sec <dbl>  `%m+%` <- lubridate::`%m+%` x <- ymd::ymd(c(200115, 200131, 200229, 200331, 200401)) bench::mark(   ymd::edate(x, 2),   x %m+% months(2) ) #> # A tibble: 2 × 6 #>   expression            min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>       <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 ymd::edate(x, 2)   1.07µs   1.44µs   693368.    2.24KB      0   #> 2 x %m+% months(2) 149.85µs 160.02µs     6181.  299.23KB     45.9 bench::mark(   ymd::edate(x, -12),   x %m+% months(-12) ) #> # A tibble: 2 × 6 #>   expression              min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr>         <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 ymd::edate(x, -12)   1.15µs   1.52µs   658489.        0B      0   #> 2 x %m+% months(-12) 597.08µs 617.87µs     1604.    94.8KB     46.1"},{"path":"https://shrektan.github.io/ymd/reference/beop.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Beginning or Ending of Period — beop","title":"Find the Beginning or Ending of Period — beop","text":"bop eop contains list functions, whose names consist two letters, first stands last, , next second stands year, quarter, month, week. example, eop$ty() means \"ending period year\" bop$lm() means \"beginning period last month\".","code":""},{"path":"https://shrektan.github.io/ymd/reference/beop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find the Beginning or Ending of Period — beop","text":"functions' signatures , one argument x, Date values can converted Date via ymd().","code":""},{"path":"https://shrektan.github.io/ymd/reference/beop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the Beginning or Ending of Period — beop","text":"","code":"bop$ty(as.Date(\"2021-03-02\")) #> [1] \"2021-01-01\" ## supports 'YMD' formatted integer or string bop$ty(210302) #> [1] \"2021-01-01\" eop$tm(200201) #> [1] \"2020-02-29\""},{"path":"https://shrektan.github.io/ymd/reference/edate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the date before / after months — edate","title":"Calculate the date before / after months — edate","text":"Calculate date / months","code":""},{"path":"https://shrektan.github.io/ymd/reference/edate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the date before / after months — edate","text":"","code":"edate(ref_date, months)"},{"path":"https://shrektan.github.io/ymd/reference/edate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the date before / after months — edate","text":"ref_date Date vector months number months added ref_date","code":""},{"path":"https://shrektan.github.io/ymd/reference/edate.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate the date before / after months — edate","text":"function name Excel function EDATE() . returns date indicated number months ref date.","code":""},{"path":"https://shrektan.github.io/ymd/reference/edate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the date before / after months — edate","text":"","code":"edate(as.Date(\"2020-01-31\"), 1) #> [1] \"2020-02-29\" ## supports 'YMD' formatted integer or string edate(200131, 1) #> [1] \"2020-02-29\" edate(200229, -12) #> [1] \"2019-02-28\""},{"path":"https://shrektan.github.io/ymd/reference/ymd.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert 'YMD' format integer or string to Date — ymd","title":"Convert 'YMD' format integer or string to Date — ymd","text":"Transform integer strings vectors 'YMD' format Date objects. intends support limited formats (separator one '.', ' ', '-' '/' separators). See possible formats examples.","code":""},{"path":"https://shrektan.github.io/ymd/reference/ymd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert 'YMD' format integer or string to Date — ymd","text":"","code":"ymd(x)"},{"path":"https://shrektan.github.io/ymd/reference/ymd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert 'YMD' format integer or string to Date — ymd","text":"x integer string vector 'YMD' format. Double values without decimal part allowed.","code":""},{"path":"https://shrektan.github.io/ymd/reference/ymd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert 'YMD' format integer or string to Date — ymd","text":"Date object. parse fails certain input, value returned NA, silently.","code":""},{"path":"https://shrektan.github.io/ymd/reference/ymd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert 'YMD' format integer or string to Date — ymd","text":"","code":"ymd(c(210326, 19981225)) #> [1] \"2021-03-26\" \"1998-12-25\" ymd(c(\"2020/1/8\", \"20 1 7\", \"1998.7.1\", \"1990-02-03\")) #> [1] \"2020-01-08\" \"2020-01-07\" \"1998-07-01\" \"1990-02-03\""},{"path":"https://shrektan.github.io/ymd/news/index.html","id":"ymd-001","dir":"Changelog","previous_headings":"","what":"ymd 0.0.1","title":"ymd 0.0.1","text":"Added NEWS.md file track changes package.","code":""}]
