[{"path":"https://shrektan.github.io/ymd/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 ymd authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://shrektan.github.io/ymd/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Xianying Tan. Author, maintainer. Hiroaki Yutani. Contributor.            configure, configure.win, tools/configure.R","code":""},{"path":"https://shrektan.github.io/ymd/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Tan X (2022). ymd: Parse 'YMD' Format Number String Date. https://shrektan.github.io/ymd/, https://github.com/shrektan/ymd.","code":"@Manual{,   title = {ymd: Parse 'YMD' Format Number or String to Date},   author = {Xianying Tan},   year = {2022},   note = {https://shrektan.github.io/ymd/, https://github.com/shrektan/ymd}, }"},{"path":"https://shrektan.github.io/ymd/index.html","id":"ymd","dir":"","previous_headings":"","what":"Parse YMD Format Number or String to Date","title":"Parse YMD Format Number or String to Date","text":"Convert ‘YMD’ format number string Date efficiently, e.g., 211225 .Date(\"2021-12-25\"), using Rust’s standard library. also provides helper functions handle Date, e.g., quick finding beginning end given period, adding months Date, etc. ’s similar lubridate package much lighter focuses Date objects.","code":""},{"path":[]},{"path":"https://shrektan.github.io/ymd/index.html","id":"binary-version-no-rust-toolchain-required","dir":"","previous_headings":"Installation","what":"Binary version (no Rust toolchain required)","title":"Parse YMD Format Number or String to Date","text":"binary package provided CRAN. , Windows macOS, package can installed via: Linux, can try use RSPM (RStudio Package Manager) repo provided RStudio PBC, via (remember choose correct binary repo URL platform): addition, may download binary package file generated GitHub Action release page install via:","code":"install.packages(\"ymd\") install.packages(\"ymd\", repos = \"{RSPM-Repo-URL}\") install.packages(\"{the-downloaded-binary-pkg-file}\", repos = NULL)"},{"path":"https://shrektan.github.io/ymd/index.html","id":"source-version-rust-toolchain-required","dir":"","previous_headings":"Installation","what":"Source version (Rust toolchain required)","title":"Parse YMD Format Number or String to Date","text":"want build dev version source, ’ll need Rust toolchain, can installed following instructions Rust book. , can build package via:","code":"remotes::install_github(\"ymd\")"},{"path":"https://shrektan.github.io/ymd/index.html","id":"use-cases-and-benchmarks","dir":"","previous_headings":"","what":"Use Cases and Benchmarks","title":"Parse YMD Format Number or String to Date","text":"","code":"print_bmk <- function(x) {   x[[1]] <- format(x[[1]])   x[[5]] <- format(x[[5]])   rnd <- \\(v) if (is.numeric(v)) round(v, 1) else v   x[, 1:8] |> lapply(rnd) |> as.data.frame() |> knitr::kable() |> print() } run_bmk <- function(..., time_unit = \"us\") {   bench::mark(..., time_unit = time_unit) |> print_bmk() }"},{"path":"https://shrektan.github.io/ymd/index.html","id":"ymd-1","dir":"","previous_headings":"Use Cases and Benchmarks","what":"ymd","title":"Parse YMD Format Number or String to Date","text":"","code":"x <- c(\"210101\", \"21/02/03\", \"89-1-03\", \"1989.03.05\", \"01 02 03\") x <- rep(x, 100) run_bmk(   ymd::ymd(x),   lubridate::ymd(x) ) x <- c(210101, 210224, 211231, 19890103) x <- rep(x, 100) run_bmk(   ymd::ymd(x),   lubridate::ymd(x) ) x <- c(\"2021-01-01\", \"2022-12-31\", \"1995-03-22\") x <- rep(x, 100) run_bmk(   ymd::ymd(x),   lubridate::ymd(x),   as.Date(x) ) x <- ymd::ymd(210515) + 1:100 run_bmk(   ymd::eop$tm(x),   lubridate::ceiling_date(x, \"month\") - 1 )"},{"path":"https://shrektan.github.io/ymd/index.html","id":"edate","dir":"","previous_headings":"Use Cases and Benchmarks","what":"edate","title":"Parse YMD Format Number or String to Date","text":"","code":"`%m+%` <- lubridate::`%m+%` x <- ymd::ymd(c(200115, 200131, 200229, 200331, 200401)) x <- rep(x, 100) run_bmk(   ymd::edate(x, 2),   x %m+% months(2) ) run_bmk(   ymd::edate(x, -12),   x %m+% months(-12) )"},{"path":"https://shrektan.github.io/ymd/index.html","id":"date-part","dir":"","previous_headings":"Use Cases and Benchmarks","what":"date part","title":"Parse YMD Format Number or String to Date","text":"","code":"# tweak from https://github.com/Rdatatable/data.table/pull/5300 set.seed(373L) x = data.table::as.IDate(sample(seq(-25000, 45000), 1e7, TRUE)) run_bmk(   data.table::wday(x),   lubridate::wday(x),   {     out <- ymd::wday(x)     data.table::fifelse(out == 7L, 1L, out + 1L)   } ) #> Warning: Some expressions had a GC in every iteration; so filtering is disabled. run_bmk(   data.table::mday(x),   lubridate::mday(x),   ymd::mday(x) ) #> Warning: Some expressions had a GC in every iteration; so filtering is disabled. run_bmk(   data.table::isoweek(x |> head(1e6)),   lubridate::isoweek(x |> head(1e6)),   ymd::iso_week(x |> head(1e6)) ) run_bmk(   data.table::month(x),   lubridate::month(x),   ymd::month(x) ) #> Warning: Some expressions had a GC in every iteration; so filtering is disabled. run_bmk(   data.table::quarter(x),   lubridate::quarter(x),   ymd::quarter(x) ) #> Warning: Some expressions had a GC in every iteration; so filtering is disabled. run_bmk(   data.table::year(x),   lubridate::year(x),   funchir::quick_year(x),   ymd::year(x) ) #> Warning: Some expressions had a GC in every iteration; so filtering is disabled. run_bmk(   data.table::mday(x),   lubridate::mday(x),   funchir::quick_mday(x),   ymd::mday(x) ) #> Warning: Some expressions had a GC in every iteration; so filtering is disabled. run_bmk(   data.table::yday(x),   lubridate::yday(x),   funchir::quick_yday(x),   ymd::yday(x) ) #> Warning: Some expressions had a GC in every iteration; so filtering is disabled."},{"path":"https://shrektan.github.io/ymd/reference/beop.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the Beginning or End of Period — beop","title":"Find the Beginning or End of Period — beop","text":"bop eop contains list functions, whose names consist two letters, first stands last, , next second stands year, quarter, month, week. example, eop$ty() means \"ending period year\" bop$lm() means \"beginning period last month\".","code":""},{"path":"https://shrektan.github.io/ymd/reference/beop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find the Beginning or End of Period — beop","text":"functions' signatures , one argument x, Date values can converted Date via ymd().","code":""},{"path":"https://shrektan.github.io/ymd/reference/beop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the Beginning or End of Period — beop","text":"","code":"bop$ty(as.Date(\"2021-03-02\")) #> [1] \"2021-01-01\" ## supports 'YMD' formatted integer or string bop$ty(210302) #> [1] \"2021-01-01\" eop$tm(200201) #> [1] \"2020-02-29\""},{"path":"https://shrektan.github.io/ymd/reference/date_part.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Date Part — date_part","title":"Extract Date Part — date_part","text":"Extract Date Part","code":""},{"path":"https://shrektan.github.io/ymd/reference/date_part.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Date Part — date_part","text":"","code":"year(ref_date)  month(ref_date)  quarter(ref_date)  iso_week(ref_date)  mday(ref_date)  wday(ref_date)  yday(ref_date)"},{"path":"https://shrektan.github.io/ymd/reference/date_part.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Date Part — date_part","text":"ref_date, Date vector. try convert input date via ymd(), input Date.","code":""},{"path":"https://shrektan.github.io/ymd/reference/date_part.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Date Part — date_part","text":"integer vector","code":""},{"path":"https://shrektan.github.io/ymd/reference/date_part.html","id":"detailed-explanation","dir":"Reference","previous_headings":"","what":"Detailed explanation","title":"Extract Date Part — date_part","text":"year, month, quarter: get year, month, quarter part iso_week: ISO 8601 week starting 1 mday: day month starting 1 yday: day year starting 1 wday: day week (ISO 8601 weekday number, Monday 1)","code":""},{"path":"https://shrektan.github.io/ymd/reference/edate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the date before / after months — edate","title":"Calculate the date before / after months — edate","text":"Calculate date / months","code":""},{"path":"https://shrektan.github.io/ymd/reference/edate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the date before / after months — edate","text":"","code":"edate(ref_date, months)"},{"path":"https://shrektan.github.io/ymd/reference/edate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the date before / after months — edate","text":"ref_date Date vector months number months added ref_date","code":""},{"path":"https://shrektan.github.io/ymd/reference/edate.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate the date before / after months — edate","text":"function name Excel function EDATE() . returns date indicated number months ref date.","code":""},{"path":"https://shrektan.github.io/ymd/reference/edate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the date before / after months — edate","text":"","code":"edate(as.Date(\"2020-01-31\"), 1) #> [1] \"2020-02-29\" ## supports 'YMD' formatted integer or string edate(200131, 1) #> [1] \"2020-02-29\" edate(200229, -12) #> [1] \"2019-02-28\""},{"path":"https://shrektan.github.io/ymd/reference/ymd.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert 'YMD' format integer or string to Date — ymd","title":"Convert 'YMD' format integer or string to Date — ymd","text":"Transform integer strings vectors 'YMD' format Date objects. intends support limited formats (separator one '.', ' ', '-' '/' separators). See possible formats examples.","code":""},{"path":"https://shrektan.github.io/ymd/reference/ymd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert 'YMD' format integer or string to Date — ymd","text":"","code":"ymd(x, ...)"},{"path":"https://shrektan.github.io/ymd/reference/ymd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert 'YMD' format integer or string to Date — ymd","text":"x integer string vector 'YMD' format. Double values without decimal part allowed. ... x. merged one vector x. convinient interactive use.","code":""},{"path":"https://shrektan.github.io/ymd/reference/ymd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert 'YMD' format integer or string to Date — ymd","text":"Date object. parse fails certain input, value returned NA, silently.","code":""},{"path":"https://shrektan.github.io/ymd/reference/ymd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert 'YMD' format integer or string to Date — ymd","text":"","code":"ymd(c(210326, 19981225)) #> [1] \"2021-03-26\" \"1998-12-25\" ymd(c(\"2020/1/8\", \"20 1 7\", \"1998.7.1\", \"1990-02-03\")) #> [1] \"2020-01-08\" \"2020-01-07\" \"1998-07-01\" \"1990-02-03\" ymd(210420, 180322) #> [1] \"2021-04-20\" \"2018-03-22\""},{"path":"https://shrektan.github.io/ymd/news/index.html","id":"ymd-010","dir":"Changelog","previous_headings":"","what":"ymd 0.1.0","title":"ymd 0.1.0","text":"ymd() now supports ... arguments, convinient interactive use, e.g., ymd(210101, 220201).","code":""},{"path":"https://shrektan.github.io/ymd/news/index.html","id":"ymd-001","dir":"Changelog","previous_headings":"","what":"ymd 0.0.1","title":"ymd 0.0.1","text":"CRAN release: 2022-01-06 Added NEWS.md file track changes package. Implement ymd(), bop$xx(), eop$xx() edate() Rust.","code":""}]
